# Build Tool Configuration

# General build configuration
[build]
version = "0.1.0"					# Version
c_standard = "c11"				   # Specify the C standard (e.g., c99, c11, gnu11, etc.)
compiler = "gcc"				   # Compiler
global_cflags = "-Wall -Wextra"	   # Optimization flags
debug_flags = "-g"				   # Debug flags
release_flags = "-O3"			   # Release flags
parallel_jobs = 4				   # Number of parallel build jobs

# Dependencies from external sources (version management supported)
[dependencies] # This section can be omitted if no dependencies
# Library 1 fetched from a git repo (version is tagged)
[[dependencies.remote]]
name = "mylib_v1"
version = "v1.0.1"
source = "https://github.com/example/mylib.git"
include_name = "mylib"   # The folder prefix for the source includes
include_dirs = ["src/include"]

# Library 2 with a different version fetched from git
[[dependencies.remote]]
name = "mylib_v2"
version = "v2.3.1"
source = "https://github.com/example/mylib.git"
include_name = "mylib_v2"
include_dirs = ["src/include"]
imports = ["mylibA", "mylibB"]

[[dependencies.remote]]
name = "glm"
source = "https://github.com/example/glm.git"
include_name = "glm"
include_dirs = ["src/include"]
build_method = "cmake"

[[dependencies.remote]]
name = "stb"
source = "https://github.com/nothings/stb.git"
include_name = "stb"
include_dirs = ["./"]
build_method = "header-only"

[[dependencies.remote]]
name = "heim_libs"
source = "https://github.com/example/heim_libs.git"
include_name = "heim"
include_dirs = ["src/include"]
build_method = "custom"
build_command = "builder_cpp -b"
build_output = ".bld_cpp/bin/heim_libs.so"

[[dependencies.pkg_config]]
name = "freetype"
pkg_config_query = "freetype2"

[[dependencies.manual]]
name = "glfw"
#cflags = ""
ldflags = "-lglfw"

# Subprojects (each subproject can have its own configuration)
[[subprojects]]
name = "core"
type = "library"								# Can be "binary", "library", or "header-only"
src_dir = "src/core"							# Directory where source files are located
include_dirs = ["src/core/include"]
dependencies = [
	{ name = "mylib_v2", imports = ["mylibA", "mylibB"] },
	"freetype",
	"glfw"
]	# List of dependencies for this subproject

# Header-only libraries
[[subprojects]]
name = "mathlib"
type = "header-only"
include_dirs = ["src/mathlib/include"]

[[subprojects]]
name = "game"
type = "binary"
src_dir = "src/game"
include_dirs = ["src/game/include", "src/core/include"]
dependencies = ["core", "mylib_v2"]					# This binary depends on core (local library) and mylib_v2 (remote)

# Custom build rules for assets (like Vulkan shaders or any custom source)
# These rules can specify specific source files, output locations, and triggers (e.g., change detection)
[[custom_build_rules]]
name = "vulkan_vertex_shaders"
description = "Compile vertex shaders to SPIR-V"
src_dir = "assets/shaders"
output_dir = "assets/compiled_shaders"
trigger_extensions = [".vert"]						# Only compile files with these extensions
output_extension = ".spv"							# Output files will have this extension
command = "glslc -o $out -fshader-stage=vert $in"   # How to compile shaders (using placeholders for input/output)
rebuild_rule = "if-changed"							# Only rebuild if the source files change (Possible values are "if-changed", "always", "on-trigger")

[[custom_build_rules]]
name = "vulkan_fragment_shaders"
description = "Compile fragment shaders to SPIR-V"
src_dir = "assets/shaders"
output_dir = "assets/compiled_shaders"
trigger_extensions = [".frag"]							# Only compile files with these extensions
output_extension = ".spv"								# Output files will have this extension
command = "glslc -o ${out} -fshader-stage=frag ${in}"   # How to compile shaders (using placeholders for input/output)
rebuild_rule = "if-changed"

[[overrides]]
name = "core"
cflags = "-Werror"
parallel_jobs = 8
